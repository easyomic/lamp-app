#função auxiliar 1 - img_func-MOD.R

#crop
img_crop <- function(img, x_1, x_2, y_1, y_2) {
  c_im1 <- imsub(img, x > width/x_1, y > height/y_1)
  c_im2 <- imsub(c_im1, x < width/x_2, y < height/y_2)
  return(c_im2)
  UseMethod('img_crop')
}
##Modifying build-in function of 'colocr'
roi_select <- function(img, threshold, shrink = 5, grow = 5, fill = 5,
                       clean = 5, tolerance = .1, n = 7) {
  UseMethod('roi_select')
}

#' @export
roi_select.default <- function(img, ...) {
  warning(paste("img is of class",
                class(img),
                ". img should be a cimg or a list of cimg objects."))
}

#' @export
roi_select.cimg <- function(img, threshold = 50, shrink = 5, grow = 5, fill = 1,
                            clean = 1, tolerance = .1, n = 7) {
  
  # check valid input
  if(!missing(threshold) & !is.numeric(threshold)) {
    stop('threshold should be a numeric >= 0 and < 100.')
  }
  if(!missing(threshold) & (threshold >= 100 | threshold < 0)) {
    stop('threshold should be a numeric >= 0 and < 100.')
  }
  
  # Ideally, I'd like to check type and value of other arguments,
  # however, I currently cannot since these arguments are optional
  #crop and rotate the image
  
  #img <- img_crop(img, x_1 = 3.5, x_2 = 1.65, y_1 = 2.3, y_2 = 5)
  img <- imrotate(img,90)
  # change image to gray scale
  img.g <- grayscale(img)
  
  # apply threshold
  img.t <- threshold(img.g, paste0(threshold, '%'))
  
  # change to pixset
  px <- as.pixset(1-img.t)
  
  # apply shrink
  px.m <- shrink(px, shrink)
  
  # apply grow
  px.m <- grow(px.m, grow)
  
  # apply fill
  ##added call to imager to avoid error
  #
  px.m <- imager::fill(px.m, fill)
  #px.m <- fill(px.m, fill)
  
  # apply clean
  px.m <- clean(px.m, clean)
  
  # add labels when n is provided
  labs.px <- .labels_add(px.m, tolerance = tolerance, n = n)
  attr(img, 'label') <- as.numeric(labs.px)
  
  # return object
  return(img)
}

#' @export
roi_select.list <- function(img, threshold, shrink = 5, grow = 5, fill = 1,
                            clean = 1, tolerance = .1, n = 7) {
  # get the length of the image list
  img_n <- length(img)
  
  # repeat arguments to match list length
  inputs <- list(threshold = threshold,
                 shrink = shrink,
                 grow = grow)
  
  for(i in seq_along(inputs)) {
    # lenght of argument
    input_n <- length(inputs[[i]])
    
    # use first item and return warning if not a single value or doesn't match
    # length of image list
    if(input_n != img_n & input_n != 1) {
      inputs[[i]] <- inputs[[i]][1]
      warning(paste0("Only first value in ", names(inputs)[[i]], ' will be used.'))
    }
    
    # match length of the arguments to that of the list of images
    if(input_n != img_n) {
      inputs[[i]] <- rep(inputs[[i]], img_n)
    }
  }
  
  # loop over the list of images and call roi_select
  newimgs <- list()
  for(i in 1:img_n) {
    newimgs[[i]] <- roi_select(img[[i]],
                               threshold = inputs$threshold[i],
                               shrink = inputs$shrink[i],
                               grow = inputs$grow[i],
                               fill = 1,
                               clean = 1,
                               tolerance = 0.1,
                               n = 7)
  }
  
  # return list of images
  return(newimgs)
}
#Roi_show modified to show only original and the pix set images with hightlight

roi_show <- function(img, ind = c(1,3)) {
  UseMethod('roi_show')
}


roi_show.default <- function(img, ...) {
  warning(paste("img is of class",
                class(img),
                ". img should be a cimg or a list of cimg objects."))
}


roi_show.cimg <- function(img, ind = c(1,3)) {
  
  # get labels from img
  # transform labels to cimg object
  labels <- attr(img, 'label')
  dims <- dim(grayscale(img))
  a <- array(labels, dim = dims)
  
  px <- cimg(a)
  
  # merge image
  
  plot(img,
       axes = FALSE,
       main = 'Input image')
  # pixset image
  plot(px,
       axes = FALSE,
       main = 'Read image')
  highlight(px)
  
  # return null
  invisible(NULL)
}


roi_show.list <- function(img, ind = c(1,3)) {
  
  # get the length of the image list
  img_n <- length(img)
  
  # repeat argument to match list length
  if(!is.list(ind)) {
    ind <- rep(list(ind), img_n)
  }
  
  # loop over the images of lists and call roi_show
  for(i in 1:img_n){
    roi_show(img[[i]],
             ind = ind[[i]])
  }
  
  # return null
  invisible(NULL)
}

#modified function ROI_CHECK
roi_check <- function(img, ind = c(1:3)) {
  UseMethod('roi_check')
}

roi_check.default <- function(img, ...) {
  warning(paste("img is of class",
                class(img),
                ". img should be a cimg or a list of cimg objects."))
}


roi_check.cimg <- function(img, ind = c(1:3)) {
  # get pixel intensities
  label <- attr(img, 'label')
  
  #Red channel intensities of ROIS
  r_channel <- channel(img, ind = 1)
  r_rois <- split(r_channel, label)
  str(r_rois)
  red_int <- data.frame(lapply(r_rois,mean))
  red_int <- red_int[,2:8] + (1-red_int[,1])
  #Green channel intensities of ROIS
  g_channel <- channel(img, ind = 2)
  g_rois <- split(g_channel, label)
  str(g_rois)
  gre_int <- data.frame(lapply(g_rois,mean))
  gre_int <- gre_int[,2:8] + (1-gre_int[,1])
  #Blue channel intensities of ROIS
  b_channel <- channel(img, ind = 3)
  b_rois <- split(b_channel, label)
  str(b_rois)
  blu_int <- data.frame(lapply(b_rois,mean))
  blu_int <- blu_int[,2:8] + (1-blu_int[,1])
  
  img_hsv_value <- rgb2hsv(r = as.numeric(red_int),g= as.numeric(gre_int), b= as.numeric(blu_int), maxColorValue = 1)
  img_h_value <- data.frame(img_hsv_value[1,])
  img_h_value <- data.frame(t(img_h_value))
  #img_h_value[,1] <- NULL
  return(img_h_value)
  # return null
  invisible(NULL)
}


roi_check.list <- function(img, ind = c(1,3)) {
  # get the length of the image list
  img_n <- length(img)
  a <- list()
  # repeat argument to match list length
  if(!is.list(ind)) {
    ind <- rep(list(ind), img_n)
  }
  
  # loop over the images of lists and call roi_check
  for(i in 1:img_n) {
    a[[i]] <-  roi_check(img[[i]],
                         ind = ind[[i]])
  }
  
  #name_list_table <- as.data.frame(bind_rows(name_list, .id = "order"))
  a.table <- as.data.frame(bind_rows(a, .id = "Time"))
  
  a.table$Time <- order(as.numeric(a.table$Time))
  colnames(a.table) <- c('Time', 'NC', "C1","C2","C3","C4","C5","C6")
  return(a.table)
  # return null
  invisible(NULL)
}

rlamp <- function(df,df2, standardcurve, dil2, thr_2, thr_01) {
  ml1 <- modlist(df, 1, 2:8, model = l7)
  plot1 <- plot(ml1, col = rep(1:7, each = 1))
    ##add legend to sigmoid plot
    legend("right",
            legend =c('Amostras','NC', '#2: 100pg', '#3: 10pg', '#4: 1pg', '#5: 100fg', '#6: 10fg', '#7: 1fg'),
            pch=16, pt.cex=1, cex=1, bty='n',
            col = c('#FFFFFFFF', 'black','#df536b','#61d04f',
                    '#2297e6', '#28e2e5', '#cd0bbc', '#f5c710'))
  ml2 <- modlist(df, 1, 3:8, model = l7)
  if (standardcurve == "Standard Calibration Curve"){
    c1 <- calib(ml2, thresh = "cpD2", predcurve = NULL, dil = dil2,
                group = NULL, plot = TRUE, conf = 0.95, B = 200)
    c2 <- round(t(as.data.frame(c1[[6]])),2)
    Data <- c("DNA copy number (log)", "Threshold time")
    colnames(c2) <- c("#2","#3","#4","#5","#6","#7")
    c2<- cbind(Data, c2)
  }
  
  else{
    pred1 <- modlist(df2, 1, 3:8, model = l7)
    c1 <- calib(pred1, thresh = "cpD2", predcurve = ml2, dil = dil2,
                group = NULL, plot = TRUE, conf = 0.95, B = 200)
      c2 <- round(t(as.data.frame(c1$predconc[1,])),2)
    Data <- c("DNA copy number (log)")
    colnames(c2) <- c("#2","#3","#4","#5","#6","#7")
    c2<- cbind(Data, c2)
  }
  return(c2)
}

#função auxiliar 2 - qpcr_func.R

#pcrfit from "qpcR"
plot.pcrfit <- function(
  x, 
  type = c("all", "single", "3D", "image"),
  fitted = TRUE, 
  add = FALSE,
  col = NULL, 
  par2D = list(),
  par3D = list(),
  ...) 
{
  type <- match.arg(type)    
  object <- x
  
  print(class(x))
  
  if (class(x)[1] != "modlist") modLIST <- list(object) else modLIST <- object      
  
  ## extract cycles and fluorescence values from all curves
  allCYC <- lapply(modLIST, function(x) x$DATA[, 1])
  allFLUO <- lapply(modLIST, function(x) x$DATA[, 2])
  vecCYC <- do.call(c, allCYC)
  vecFLUO <- do.call(c, allFLUO)
  
  ## make unique cycles  
  CYC <- unique(as.numeric(vecCYC))  
  CYC <- CYC[!is.na(CYC)]    
  
  ## calculate min and max fluo values for defining ylim 
  MIN <- min(vecFLUO, na.rm = TRUE)   
  MAX <- max(vecFLUO, na.rm = TRUE)     
  
  ## length of 'modlist'
  LEN <- length(modLIST)
  ## names of 'modlist'
  NAMES <- sapply(modLIST, function(x) x$names)   
  
  ## define plotting colors
  if (is.null(col)) {
    COL <- rep(1, LEN)    
    if (class(object)[2] == "replist") COL <- rainbow(attr(object, "nlevels"))     
  } else COL <- rep(col, length.out = LEN)   
  
  ## 3D plot empty setup using par3D parameters
  if (type == "3D") {
    do.call(plot3d, modifyList(list(x = CYC, y = 1:LEN, z = MAX, type = "n", axes = FALSE, box = FALSE, xlab = "", 
                                    ylab = "", zlab = "", zlim = c(0, 1.1 * MAX)), par3D))
    do.call(axis3d, modifyList(list('x', at = pretty(CYC), cex = 0.5), par3D))
    do.call(mtext3d, modifyList(list("Minute", 'x', line = 2), par3D))     
    do.call(axis3d, modifyList(list('y', at = 1:LEN, label = NAMES, cex = 0.5), par3D))
    do.call(mtext3d, modifyList(list("Run", 'y', line = 2), par3D))
    do.call(axis3d, modifyList(list('z', cex = 0.5), par3D))
    do.call(mtext3d, modifyList(list("Hue", 'z', line = 2), par3D))
  }   
  
  ## standard 'all' plot empty setup
  if (type == "all" && !add) {   
    tempLIST <- modifyList(list(CYC, rep(MAX, length(CYC)), ylim = c(MIN, MAX), 
                                xlab = "Minute", ylab = "Hue", las = 1), par2D)
    tempLIST$type <- "n"
    do.call(plot, tempLIST)   
  }
  
  ## plot matrix empty setup
  if (type == "single") {
    DIM <- ceiling(sqrt(LEN))
  } 
  
  ## image plot 
  if (type == "image") {
    RUNS <- 1:length(modLIST)
    nRUNS <- length(RUNS)
    ## unique cycles
    CYCS <- unique(unlist(lapply(modLIST, function(x) x$DATA[, 1])))
    nCYCS <- length(CYCS)
    ## convert list with fluo data to matrix, fll unequal length with NA
    allLIST <- lapply(modLIST, function(x) x$DATA[, 2])
    maxCYCS <- max(sapply(allLIST, length))
    for (i in 1:length(allLIST)) allLIST[[i]] <- c(allLIST[[i]], rep(NA, maxCYCS - length(allLIST[[i]])))
    allDAT <- do.call(cbind, allLIST)
    ## image setup
    allDAT <- allDAT[, ncol(allDAT):1]
    image(allDAT, col = heat.colors(100), axes = FALSE, xlab = "Minutes", ylab = "Runs")
    axis(1, at = seq(0, 1, length.out = nCYCS), labels = CYCS)
    axis(2, at = seq(0, 1, length.out = nRUNS), labels = rev(RUNS))
  }
  
  ## iterate through all curves
  for (i in 1:LEN) {
    DATA <- modLIST[[i]]$DATA    
    DATA <- na.omit(DATA)      
    FITTED <- fitted(modLIST[[i]])       
    m <- match(CYC, DATA[, 1])
    m <- na.omit(m)
    
    ## plot 3D curves
    if (type == "3D") {
      do.call(points3d, modifyList(list(x = DATA[, 1], y = i, z = DATA[, 2], color = COL[i]), par3D))
      if (!is.null(FITTED) && fitted) do.call(lines3d, modifyList(list(x = DATA[m, 1], y = i, z = FITTED[m], color = COL[i]), par3D))      
    }
    
    ## plot 2D curves
    if (type == "all") {
      do.call(points, modifyList(list(DATA[, 1], DATA[, 2], col = COL[i]), par2D))
      if (!is.null(FITTED) && fitted) do.call(lines, modifyList(list(DATA[m, 1], FITTED[m], col = COL[i]), par2D)) 
    } 
    
    ## plot matrix curves
    if (type == "single") {
      NAME <- NAMES[i]
      ## color by failed fit or failed structure
      if (grepl("\\*\\*[[:alnum:]]*", NAME)) colMAIN <- "blue" 
      else if (grepl("\\*[[:alnum:]]*", NAME)) colMAIN <- "red"
      else colMAIN <- "black"
      TRY <- try(do.call(plot, modifyList(list(DATA[, 1], DATA[, 2], main = NAME, cex.main = 0.7, col.main = colMAIN, type = "p", 
                                               xlab = FALSE, ylab = FALSE, xaxt = "n", yaxt = "n", col = COL[i]), par2D)), silent = TRUE)
      if (inherits(TRY, "try-error")) next      
      if (!is.null(FITTED) && fitted) do.call(lines, modifyList(list(DATA[m, 1], FITTED[m], col = COL[i]), par2D))      
    }     
  }     
}  

#Calib from "qpcR"
calib <- function(
  refcurve, 
  predcurve = NULL, 
  thresh = "cpD2", 
  dil = NULL,
  group = NULL,
  plot = TRUE,
  conf = 0.95,
  B = 200
)
{
  if (class(refcurve)[1] != "modlist") stop("'refcurve' is not a 'modlist'!")
  if (!is.null(predcurve) & class(predcurve)[1] != "modlist") stop("'predcurve' is not a 'modlist'!")
  if (thresh != "cpD2" && !is.numeric(thresh)) stop("'thresh' must be either 'cpD2' or numeric!")
  if (is.null(dil)) stop("Please define dilutions!")
  if (!is.null(group) && (length(dil) != length(unique(group)))) stop("Supply as many dilutions as number of PCR groups in 'refcurve'!")
  
  lref <- length(refcurve)
  lpred <- length(predcurve)
  lgroup <- length(unique(group))
  dil <- log10(dil)
  COLref <- rep(rainbow(nlevels(as.factor(dil))), table(as.factor(dil)))
  COLpred <- rep(rainbow(lpred))   
  
  if(is.null(group))  {
    group <- as.factor(1:lref)
    isReps <- FALSE
  } else isReps <- TRUE
  
  LMFCT <- function(dil, ref, pred = NULL, conf) {
    linModY <- lm(ref ~ dil)
    conf.Y <- predict(linModY, interval = "confidence", level = conf)
    eff <- as.numeric(10^(-1/coef(linModY)[2]))
    FOM1 <- AIC(linModY)
    FOM2 <- AICc(linModY)
    FOM3 <- Rsq(linModY)
    FOM4 <- Rsq.ad(linModY)
    
    if (!is.null(pred)) {
      linModX <- lm(dil ~ ref)
      pred.conc <- sapply(as.numeric(pred), function(x) predict(linModX, newdata = data.frame(ref = x), interval = "confidence", level = conf))
    } else pred.conc <- NULL
    
    return(list(linModY = linModY, conf.Y = conf.Y, eff = eff, FOM1 = FOM1, FOM2 = FOM2,
                FOM3 = FOM3, FOM4 = FOM4, pred.conc = pred.conc[1, ], pred.conf = pred.conc[2:3, ]))
  }
  
  print("Calculating threshold time of reference curves...")
  flush.console()
  
  if (thresh == "cpD2") refCt <- sapply(refcurve, function(x) efficiency(x, plot = FALSE)$cpD2)
  else refCt <- as.numeric(sapply(refcurve, function(x) predict(x, newdata = data.frame(Fluo = thresh), which = "x")))   
  
  print("Calculating threshold time of prediction curves...")
  flush.console()
  
  if (!is.null(predcurve)) {
    if (thresh == "cpD2") predCt <- sapply(predcurve, function(x) efficiency(x, plot = FALSE)$cpD2)
    else predCt <- as.numeric(sapply(predcurve, function(x) predict(x, newdata = data.frame(Fluo = thresh), which = "x")))
  } else predCt <- NULL
  
  iterRef <- split(refCt, group)
  
  lmResList <- list()
  iterMat <- matrix(ncol = lgroup, nrow = B)
  
  for (i in 1:B) {
    if (isReps) selRef <- sapply(iterRef, function(x) sample(x, 1))
    else selRef <- unlist(iterRef)
    lmRes <- LMFCT(dil = dil, ref = as.numeric(selRef), pred = predCt, conf = conf)
    lmResList[[i]] <- lmRes
    iterMat[i, ] <- selRef
    
    if (plot) {
      if (i == 1) {
        plot(dil, selRef, col = c(2:7), pch = 16, cex = 1.3, xlab = "Log of DNA Copy Number", ylab = "Threshold Time", main = "Standard Calibration Curve", add = FALSE)
      } else {
        points(dil, selRef, col = c(2:7), pch = 16, cex = 1.3)
        abline(lmRes$linModY, lwd = 2)
        #Red line in the threshold graph
        lines(dil, lmRes$conf.Y[, 2], col = 2, lty = 3)
        lines(dil, lmRes$conf.Y[, 3], col = 2, lty = 3)
        
        #show the regression equation
        cf <- round(coef(lmRes$linModY), 4)
        r_sqr <- summary(lmRes$linModY)$r.squared
        thresh_data_table <- cbind.data.frame(dil, selRef)
        eq <- paste0("y = ", cf[1],
                     ifelse(sign(cf[2])==1, " + ", " - "), abs(cf[2]), "x", ". R.square = ", 
                     round(r_sqr, 4))
        
        ## printing of the equation
        mtext(eq, 3, line=0)
      }
      if (!is.null(predcurve)) {
        points(lmRes$pred.conc, predCt, pch = 15, col = COLpred, cex = 1.5)
        if (is.vector(lmRes$pred.conf)) lmRes$pred.conf <- matrix(lmRes$pred.conf, ncol = 1)
        if (!all(is.na(lmRes$pred.conc))) {
          arrows(lmRes$pred.conf[1, ], predCt, lmRes$pred.conf[2, ], predCt, code = 3, angle = 90, length = 0.1, col = "blue")
        }
      }
    }
  }
  
  summaryList <- list()
  lenRML <- 2:length(lmResList[[1]])
  
  for (i in lenRML) {
    temp <- sapply(lmResList, function(x) x[[i]])
    summaryList[[i - 1]] <- t(temp)
  }
  
  names(summaryList) <- names(lmRes[lenRML])
  
  alpha = 1 - conf
  CONFINT <- function(x, alpha = alpha) quantile(x, c(alpha/2, 1 - (alpha/2)), na.rm = TRUE)
  
  CONF.eff <- CONFINT(summaryList$eff, alpha = alpha)
  CONF.AICc <- CONFINT(summaryList$FOM2, alpha = alpha)
  CONF.Rsq.ad <- CONFINT(summaryList$FOM4, alpha = alpha)
  
  if (!is.null(predcurve)) {
    if (nrow(summaryList$pred.conc) == 1) summaryList$pred.conc <- t(summaryList$pred.conc)
    CONF.predconc <- apply(summaryList$pred.conc, 2, function(x) CONFINT(x, alpha = alpha))
    if (!isReps) CONF.predconc <- apply(rbind(lmRes$pred.conf[1, ], lmRes$pred.conf[2, ]) , 2, function(x) CONFINT(x, alpha = alpha))
  } else {
    summaryList$pred.conc <- NULL 
    CONF.predconc <- NULL
  } 
  
  #if (plot) {
    #boxplot(as.numeric(summaryList$eff), main = "Efficiency", cex = 0.2)
    #abline(h = CONF.eff, col = 2, lwd = 2)
    #boxplot(as.numeric(summaryList$FOM2), main = "corrected AIC", cex = 0.2)
    #abline(h = CONF.AICc, col = 2, lwd = 2)
    #boxplot(as.numeric(summaryList$FOM4), main = "adjusted R-square", cex = 0.2)
    #abline(h = CONF.Rsq.ad, col = 2, lwd = 2)
    #if (!is.null(predcurve)) {
      #boxplot(summaryList$pred.conc, main = "log(conc) of predicted", cex = 0.2)
      #abline(h = CONF.predconc, col = 2, lwd = 2)
    #}
  #}
  return(list(eff = summaryList$eff, AICc = summaryList$FOM2, Rsq.ad = summaryList$FOM4, predconc = summaryList$pred.conc,
              conf.boot = list(conf.eff = CONF.eff, conf.AICc = CONF.AICc, conf.Rsq.ad = CONF.Rsq.ad, conf.predconc = CONF.predconc), thresh_data_table))
}

#aplicativo principal
## #### #### #### #### #### ##

# Easyomics qLamp App

## #### #### #### #### #### ##


library(shiny)
library(shinyFiles)
library(beepr)
library(shinyBS)
library(imager)
library(colocr)
library(qpcR)
source('functions/img_func-MOD.R')
source('functions/qpcr_func.R')
library(shinyscreenshot)
library(tidyverse)
library(shinyjs)
library(xfun)
library("gridGraphics") #to rotate plots
#library(shinylogs)
library(TeachingDemos)

# UI ####
ui <-  fluidPage(
  tags$style(HTML("
    .tabbable > .nav > li > a {text-align: center;background-color: #a476cf;  color:black; width:70px;height: 30px;padding: 2px;}
  ")),
  useShinyjs(),
  #use_tracking(), #needed by shinylogs
  h5("EasyOmics qLAMP", span("", style = "color:red;font-weight: 50"),
     style = "font-size: 70%;color: #000000; text-align: center;background-color:#a476cf;padding: 5px"),
  column(12,h6("A tool for realtime colorimetric quantitative LAMP analysis from timelapse images of reaction chambers.", style="font-size: 70%;padding: 0px"),
  ),
  ## Main
  fluidRow( ),
  # Tabs
  tabsetPanel(type = "pills",
              tabPanel(
                h6('Capturas', style="text-align: center;"),
                tags$style(type = "text/css",
                           "label { font-size: 10px; }"
                ),
                column(width = 6, align="center",
                       splitLayout(
                         numericInput(inputId="NUMCAP",width = '60%',
                                      label="Total captures",value=1, ),
                         numericInput(inputId="INTECAP",width='60%',
                                      label="Delay [seconds]",value = 1)
                       ),
                       splitLayout(
                         actionButton('startbutton','Start!'),
                         actionButton("setconfirm","Confirm"),
                         actionButton("resetdefault","Reset"),
                         actionButton("capturebutton","Capture!"),
                       ),
                       actionButton('hiddencapturebutton','hc', width = 0),
                       textOutput("status"),
                       textOutput("answer"),
                       HTML(
                         '
      <div style="width: 100%">
      
      <input type="range" id="control-zoom" min="0" , max="0">
      <div style="display:inline-block;vertical-align:center;">
      <div>Zoom: </div>
      </div>
      <div style="display:inline-block;">
      <output id="control-zoom-value"></output>
      </div>
          
          </div>
          <p><button hidden id="start" onclick="start()">start camera!</button></p>
          <div>
          <div style="float:left;margin-right:5px;">
          <p><video id="video-element" width=100% height=10% autoplay=true/></p>
          </div>
          <div style="float:left">
          <p><img id="image-element" width=100%> </img></p>                             
          </div>
          </div>
          
          '
                       ),
                       tags$script(
                         HTML(
                           "
  const constraints =  { 'video': { width: 500, facingMode: \"environment\" }};
  var videoElement = document.getElementById('video-element');
  var zoomControl = document.getElementById('control-zoom');
  var zoomControlValue = document.getElementById('control-zoom-value');
  var imageElement = document.getElementById('image-element');
  var imageGetter;
  
  function start() {
    navigator.mediaDevices.getUserMedia(constraints)
      .then(gotMedia)
      .catch(e => { console.error('getUserMedia() failed: ', e); });
  }
  
  function gotMedia(mediastream) {
    videoElement.srcObject = mediastream;
    document.getElementById('start').disabled = true;
    
    var videoStream = mediastream.getVideoTracks()[0];
    imageGetter = new ImageCapture(videoStream);
  
    // Chrome timeout from https://crbug.com/711524
    setTimeout(() => {
      const capabilities = videoStream.getCapabilities()
      // Check whether zoom is supported or not.
      if (!capabilities.zoom) {
        return;
      }
      
      zoomControl.min = capabilities.zoom.min;
      zoomControl.max = capabilities.zoom.max;
      zoomControl.step = capabilities.zoom.step;
  
      zoomControl.value = zoomControlValue.value = videoStream.getSettings().zoom;
      zoomControlValue.value = zoomControl.value;
      
      zoomControl.oninput = function() {
        zoomControlValue.value = zoomControl.value;
        videoStream.applyConstraints({advanced : [{zoom: zoomControl.value}] });
      }
    }, 500);
    
  }
  
  function takePhoto() {
    imageGetter.takePhoto()
      .then((blob) => {
        console.log('Photo taken: ' + blob.type + ', ' + blob.size + 'B')
        imageElement.src = URL.createObjectURL(blob);
        
        //get blob content
        //var reader = new FileReader();
        //reader.onload = function() {
        //console.log(reader.result);
        //}
        //reader.readAsDataURL(blob);
        //end get blob content
        
      })
      .catch((err) => { 
        console.error('takePhoto() failed: ', e);
      });
        
  }
      // ### JPEG ###
      
      //width/height
      //var width = 500; 
      //var height = 500; 
      
      //canvas
      //var canvas = document.createElement('canvas');
      //canvas.width  = width;
      //canvas.height = height;
        
      //get canvas context
      //var ctx = canvas.getContext('2d');
       
      
      //image container
      //var img = document.getElementById('image-element'); 
      
      //draw image on canvas
      //ctx.drawImage(img,0,0,width,height);
      
      //save image as base64 jpeg
      //var jpegFile = canvas.toDataURL('image/jpeg');
      
  // buttons
  //start()
  //gotMedia(mediastream)
  //takePhoto()
        "
                         )
                         
                       )
                       ,
                ),
                
              ),
              ## Select ROI
              tabPanel(h6('Imagens'),
                       sidebarLayout(
                         sidebarPanel(
                           #tags$br(),
                           
                           shinyDirButton("dir", "Input directory", "Upload"),
                           verbatimTextOutput("dir", placeholder = TRUE),
                           
                           fileInput('image1', 'UPLOAD IMAGES', multiple = TRUE
                                     #,capture='environment'
                           ),
                           
                           bsTooltip('image1',
                                     'Select and upload the chamber images.',
                                     'right', options = list(container = "body")),
                           #tags$hr(),
                           
                           tags$p('Adjust parameters to remove the background,'),
                           sliderInput('threshold', 'Threshold', 1, 99, 29, 1),
                           bsTooltip('threshold',
                                     'Choose a threshold for excluding the background,',
                                     'right', options = list(container = "body")),
                           
                           
                           sliderInput('shrink', 'Shrink', 1, 10, 1, 1),
                           bsTooltip('shrink',
                                     'Shrink the selected area by eroding the bounderies around it.',
                                     'right', options = list(container = "body")),
                           
                           sliderInput('grow', 'Grow', 1, 10, 1, 1),
                           bsTooltip('grow',
                                     'Grow the selected area by dilating the bounderies around it.',
                                     'right', options = list(container = "body"))),
                         mainPanel(
                           plotOutput("image_plot", height = "3000px"),
                           tags$h4('Hue value table'),
                           tableOutput('table')
                           
                         ))),
              
              ## Realamp 
              
              tabPanel(h6('Dados'),
                       sidebarLayout(
                         sidebarPanel(
                           #tags$br(),
                           radioButtons('curve', 'MODE OF ANALYSIS', choices = c("Standard Calibration Curve","Quantification of Real Sample")),
                           #tags$hr(),
                           
                           numericInput('dil', 'Lowest concentration', 1,min = 0, max = NA, step = NA ),
                           numericInput('dil_factor', 'Dilution factor', 10,min = 0, max = NA, step = NA),
                           #tags$hr(),
                           
                           
                           fileInput('StdCurve', 'Upload the Calibration Curve',
                                     multiple = FALSE)),
                         
                         mainPanel(
                           fluidRow(
                             plotOutput('graph_plot', height = "700px"),
                             tableOutput('table2'),
                             tags$br(),
                             downloadButton("qLAMP.csv", "Save as Calibration Curve")
                           ))))
              
              
              
              
  ))


# SERVER ####
server <- function(input, output, session) {
  shinyjs::hide('hiddencapturebutton')
  
  # intiate interactive values
  values <- reactiveValues()
  
  
  listfl<<-list()
  
  
  # load images
  img1 <- reactive({
    image_load(input$image1$datapath[order(input$image1$name, decreasing = FALSE)])
    
  })
  
  ## calculate the pixset
  px <- reactive({
    roi_select(img1(),
               threshold = input$threshold,
               shrink = input$shrink,
               grow = input$grow)
  })
  
  ## calculate correlation
  b1 <- reactive({
    roi_check(px())  
  })
  
  # Output Views
  ## Select ROI
  
  # plots
  output$image_plot <- renderPlot({
    req(input$image1)
    n <- length(input$image1$name)/2
    par(mfrow=c(n+1,4), mar = rep(1, 4))
    roi_show(px())
  })
  
  s1 <- reactive({
    read.csv(input$StdCurve$datapath)
  })
  dil1 <- reactive({
    c(input$dil,
      input$dil*input$dil_factor^1,
      input$dil*input$dil_factor^2,
      input$dil*input$dil_factor^3,
      input$dil*input$dil_factor^4,
      input$dil*input$dil_factor^5)
  })
  
  ## sigmoid plot
  output$graph_plot <- renderPlot({
    req(input$image1)
    par(mfrow=c(2,1))
    rlamp(df = b1(), standardcurve = input$curve, df2 = s1(), dil2 = dil1(), thr_2 = input$thr_1, thr_01 = input$thr_0)
    
  })
  
  ## G/R ratio table
  output$table <- renderTable({
    req(input$image1)
    b1()
  })
  output$table2 <- renderTable({
    req(input$image1)
    rlamp(df = b1(), standardcurve = input$curve, df2 = s1(), dil2 = dil1(), thr_2 = input$thr_1, thr_01 = input$thr_0)
  })
  # download plot
  
  # download table
  output$qLAMP.csv <- downloadHandler(
    #specify the filename
    filename = function() {
      paste("qLAMP", ".csv", sep = "")
    },
    
    content = function(file) {
      req(input$image1)
      write.csv(b1(), file, row.names = FALSE)
    })
  
  #reset default zoom
  reset.default<-function() {
    ##set parameters in main-test-back-camera.js to default values
    #gsub_file("main.js",
    #         "zoomvalue = .*;","zoomvalue = 1;")
  }
  
  # update zoom when input change
  reset.vars<-function(){
    # zoom.value=({input$ZOOMINPUT})
    # gsub_file("main.js",
    #           "zoomvalue = .*;",paste0("zoomvalue = ",zoom.value,";"))
  }
  
  status <- reactiveVal()
  
  out <- eventReactive(input$setconfirm,{
    status("Values updated")
    reset.vars()
    #session$reload()
    sprintf(paste0(input$NUMCAP, " captures; ",
                   input$INTECAP," seconds delay; "
    ))
    
  })
  
  observeEvent({list(input$NUMCAP,input$INTECAP)},
               {status("Confirm parameters before any capture")})
  
  observeEvent({list(input$INTECAP)},
               {status(paste0())})
  
  output$answer <- renderText({out()})
  output$status <- renderText({status()})
  
  
  observeEvent(input$resetdefault, {
    reset.default()
    updateNumericInput(session, "NUMCAP", value = 1)
    updateNumericInput(session, "INTECAP", value = 1)
    
  })
  
  
  #runjs("var today = new Date(); alert(today);")
  
  ##simulate click and repeat in a loop
  simulateclick<-function(){
    timestamp()
    runjs(paste0("console.log('",status(),"'); var confirmation = '",status(),"'; if (confirmation === 'Values updated') { var i = 1; function myLoop() { setTimeout(function() { console.log(\'cheese\'+i); document.getElementById(\'hiddencapturebutton\').click(); i++; if (i <=",(input$NUMCAP),") { myLoop(); } },", input$INTECAP*1000,") } myLoop() } ; "))
    
  }
  
  
  ##count clicks to get capture count
  cap.count = reactiveVal(0)
  
  #simulate click
  observeEvent(input$capturebutton, {
    runjs('document.getElementById("capturebutton").style.backgroundColor = "red";')
    cap.count(0)
    #timestamp()
    if (status() == 'Values updated') {
      a=sprintf(format(Sys.time(), '%Y-%m-%d_%H-%M-%S'))
      dirname=paste("folder-",a, sep = "")
      dir.create(dirname)
      capturesfolder<<-(paste0(dirname))
      file.create(paste0(capturesfolder,'/paths.tsv'))
      
      testmyfolder<<-as.character(capturesfolder)
      simulateclick()
      print(input$shinyscreenshot)
      
      
      # img1 <<- reactive({
      #   list.images<<-list.files(
      #     path=as.character(paste0(capturesfolder)),
      #     pattern="*.png", all.files=FALSE,
      #     full.names=T, include.dirs = T)
      #   image_load(list.images)
      #   
      # })
      
    }
    
    runjs('takePhoto()')
    a=(Sys.time())
    a=.POSIXct(a, "America/Sao_Paulo")
    stringi::stri_timezone_list()
    captname=paste("easyomics-",a, sep = "")

  })
  
  
  observeEvent(input$hiddencapturebutton, {
    #if (status == 'Values updated') {
    runjs('takePhoto()')
    a=sprintf(format(Sys.time(), '%Y-%m-%d_%H-%M-%S'))
    captname=paste("easyomics-",a, sep = "")
    screenshot(filename = captname,timer = 0, selector = "#image-element", scale = 2, server_dir = capturesfolder, download = T)
    timestamp()
    
    cap.count(cap.count()+1) 
    
    if (cap.count()==input$NUMCAP) {
      #beep at server
      beepr::beep()
      #beep at user
      insertUI(selector="#capturebutton",
               where="afterEnd",
               ui=tags$audio(
                 src="alert.wav",
                 type="audio/wav",
                 autoplay=NA,
                 controls=NA,
                 style="display:none;")
      )
      
      status(paste0(input$NUMCAP,": Fim"))
      showNotification("FIM *-*", type = "message", duration = 1800)
      runjs('document.getElementById("capturebutton").style.backgroundColor = "white";')
      
    } else {
      status(cap.count())
      
    }

  })
  
  ## SHINYLOGS
  # Just take a look at what is generated
  #track_usage(what = "error",
  #           storage_mode = store_json(path = "logs/"))
  # track_usage(
  #   storage_mode = store_custom(FUN = function(logs){
  #     str(logs, max.level=3)
  #   })
  # )
  observeEvent(input$startbutton, {
    runjs('start()')
  })
  
  ##SHINY SERVER LOGIC
  shinyDirChoose(
    input,
    'dir',
    roots = c(home = '.'),
    filetypes = c('', 'txt', 'bigWig', "tsv", "csv", "bw", "jpg", "jpeg", "png")
  )
  
  global <- reactiveValues(datapath = getwd())
  
  dir <- reactive(input$dir)
  
  output$dir <- renderText({
    paste("folder: ",global$datapath)
  })
  
  observeEvent(ignoreNULL = TRUE,
               eventExpr = {
                 input$dir
               },
               handlerExpr = {
                 req(is.list(input$dir))
                 home <- normalizePath("~")
                 global$datapath <-
                   file.path(home, paste(unlist(dir()$path[-1]), collapse = .Platform$file.sep))
               })
  
}

# Run the application
shinyApp(ui = ui, server = server)


